[gd_scene load_steps=13 format=2]

[ext_resource path="res://assets/menu-background/fish-particle.png" type="Texture" id=1]
[ext_resource path="res://assets/menu-background/tile-background.png" type="Texture" id=2]

[sub_resource type="Curve" id=7]
min_value = -1.0
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=8]
curve = SubResource( 7 )

[sub_resource type="Curve" id=4]
_data = [ Vector2( 0.00475059, 0 ), 0.0, 0.744191, 0, 0, Vector2( 1, 1 ), 1.17762, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=5]
curve = SubResource( 4 )

[sub_resource type="ParticlesMaterial" id=1]
emission_shape = 2
emission_box_extents = Vector3( 2, 3, 1 )
direction = Vector3( 0, 0, 1 )
spread = 74.73
gravity = Vector3( 0, 0, 2 )
scale = 2.0
scale_curve = SubResource( 5 )
hue_variation_random = 1.0
hue_variation_curve = SubResource( 8 )

[sub_resource type="SpatialMaterial" id=6]
flags_transparent = true
flags_unshaded = true
vertex_color_use_as_albedo = true
params_cull_mode = 2
albedo_color = Color( 1, 1, 1, 0.286275 )
albedo_texture = ExtResource( 1 )

[sub_resource type="QuadMesh" id=3]
material = SubResource( 6 )

[sub_resource type="Shader" id=11]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	uv1_triplanar_pos.x += TIME*1.5;
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/albedo = Color( 0.556863, 0.556863, 0.556863, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 2 )

[sub_resource type="QuadMesh" id=10]
material = SubResource( 12 )
size = Vector2( 20, 20 )

[node name="menu-background" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
far = 670.6

[node name="Particles" type="Particles" parent="Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -4.35238 )
amount = 10
lifetime = 2.3
randomness = 0.23
visibility_aabb = AABB( -4, -2.73075, -4.60849, 8, 5.4615, 9.21699 )
process_material = SubResource( 1 )
draw_pass_1 = SubResource( 3 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -5.86466 )
mesh = SubResource( 10 )
material/0 = null
